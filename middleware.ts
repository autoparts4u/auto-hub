import { NextResponse } from "next/server"
import type { NextRequest } from "next/server";

export async function middleware(req: NextRequest) {
  // const token = await getToken({
  //   req,
  //   secret: process.env.AUTH_SECRET,
  //   cookieName: "authjs.session-token", // üëà —ç—Ç–æ –≤–∞–∂–Ω–æ!
  // });

  console.log("üß† Token from middleware:", req.nextUrl.pathname);
  // const pathname = req.nextUrl.pathname;

  // // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  // if (!token) {
  //   if (pathname === "/" || pathname.startsWith("/sign-in")) {
  //     return NextResponse.next();
  //   }
  //   return NextResponse.redirect(new URL("/sign-in", req.url));
  // }

  // // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –Ω–∞ "/", –¥–µ–ª–∞–µ–º redirect –ø–æ —Ä–æ–ª–∏
  // if (pathname === "/") {
  //   if (token.role === "admin") {
  //     return NextResponse.redirect(new URL("/dashboard", req.url));
  //   }
  //   if (token.role === "user") {
  //     return NextResponse.redirect(new URL("/shop", req.url));
  //   }
  // }

  return NextResponse.next();
}

// –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –∫–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
export const config = {
  matcher: ["/", "/dashboard/:path*", "/shop/:path*"],
};