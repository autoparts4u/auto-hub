import { PrismaClient, Role } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  // –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  console.log('üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  await prisma.autopartLog.deleteMany();
  await prisma.analogues.deleteMany();
  await prisma.orderItems.deleteMany();
  await prisma.orders.deleteMany();
  await prisma.orderStatuses.deleteMany();
  await prisma.clientsDeliveryMethods.deleteMany();
  await prisma.clients.deleteMany();
  await prisma.deliveryMethods.deleteMany();
  await prisma.autopartsEngineVolumes.deleteMany();
  await prisma.autopartsAutos.deleteMany();
  await prisma.autopartPrices.deleteMany();
  await prisma.autopartsWarehouses.deleteMany();
  await prisma.autoparts.deleteMany();
  await prisma.textForAuthopartsSearch.deleteMany();
  await prisma.engineVolume.deleteMany();
  await prisma.auto.deleteMany();
  await prisma.categories.deleteMany();
  await prisma.brands.deleteMany();
  await prisma.user.deleteMany();
  await prisma.priceTypes.deleteMany();
  await prisma.warehouses.deleteMany();
  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');

  // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ü–µ–Ω
  console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ü–µ–Ω...');
  const priceTypes = await Promise.all([
    prisma.priceTypes.create({ data: { name: '–†–æ–∑–Ω–∏—á–Ω–∞—è' } }),
    prisma.priceTypes.create({ data: { name: '–û–ø—Ç–æ–≤–∞—è' } }),
    prisma.priceTypes.create({ data: { name: 'VIP' } }),
    prisma.priceTypes.create({ data: { name: '–î–∏–ª–µ—Ä—Å–∫–∞—è' } }),
  ]);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${priceTypes.length} —Ç–∏–ø–æ–≤ —Ü–µ–Ω`);

  // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤
  console.log('üè¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤...');
  const warehouses = await Promise.all([
    prisma.warehouses.create({
      data: { name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥', address: '—É–ª. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è, 10' },
    }),
    prisma.warehouses.create({
      data: { name: '–°–∫–ª–∞–¥ ‚Ññ2', address: '–ø—Ä. –õ–µ–Ω–∏–Ω–∞, 45' },
    }),
    prisma.warehouses.create({
      data: { name: '–°–∫–ª–∞–¥ ‚Ññ3', address: '—É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è, 7' },
    }),
  ]);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${warehouses.length} —Å–∫–ª–∞–¥–æ–≤`);

  // 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  const hashedPassword = await bcrypt.hash('password123', 10);
  
  const admin = await prisma.user.create({
    data: {
      name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      email: 'admin@autohub.com',
      password: hashedPassword,
      role: Role.admin,
      isConfirmed: true,
      phone: '+380501234567',
      address: '–≥. –ö–∏–µ–≤, —É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 1',
      priceAccessId: priceTypes[0].id,
      warehouseAccessId: warehouses[0].id,
    },
  });

  const users = await Promise.all([
    prisma.user.create({
      data: {
        name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
        email: 'ivan@example.com',
        password: hashedPassword,
        role: Role.user,
        isConfirmed: true,
        phone: '+380501234568',
        address: '–≥. –ö–∏–µ–≤, —É–ª. –°–∞–¥–æ–≤–∞—è, 12',
        priceAccessId: priceTypes[0].id,
        warehouseAccessId: warehouses[0].id,
      },
    }),
    prisma.user.create({
      data: {
        name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
        email: 'maria@example.com',
        password: hashedPassword,
        role: Role.user,
        isConfirmed: true,
        phone: '+380501234569',
        address: '–≥. –•–∞—Ä—å–∫–æ–≤, –ø—Ä. –ü–æ–±–µ–¥—ã, 33',
        priceAccessId: priceTypes[1].id,
        warehouseAccessId: warehouses[1].id,
      },
    }),
    prisma.user.create({
      data: {
        name: '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤',
        email: 'alex@example.com',
        password: hashedPassword,
        role: Role.user,
        isConfirmed: true,
        phone: '+380501234570',
        priceAccessId: priceTypes[2].id,
      },
    }),
  ]);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${users.length + 1} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)`);

  // 4. –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤
  console.log('üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤...');
  const brands = await Promise.all([
    prisma.brands.create({ data: { name: 'Bosch' } }),
    prisma.brands.create({ data: { name: 'Mann' } }),
    prisma.brands.create({ data: { name: 'Brembo' } }),
    prisma.brands.create({ data: { name: 'Sachs' } }),
    prisma.brands.create({ data: { name: 'Hengst' } }),
    prisma.brands.create({ data: { name: 'NGK' } }),
    prisma.brands.create({ data: { name: 'Valeo' } }),
    prisma.brands.create({ data: { name: 'Denso' } }),
    prisma.brands.create({ data: { name: 'Mahle' } }),
    prisma.brands.create({ data: { name: 'SKF' } }),
  ]);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${brands.length} –±—Ä–µ–Ω–¥–æ–≤`);

  // 5. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
  const categories = await Promise.all([
    prisma.categories.create({ data: { name: '–§–∏–ª—å—Ç—Ä—ã' } }),
    prisma.categories.create({ data: { name: '–¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞' } }),
    prisma.categories.create({ data: { name: '–ü–æ–¥–≤–µ—Å–∫–∞' } }),
    prisma.categories.create({ data: { name: '–î–≤–∏–≥–∞—Ç–µ–ª—å' } }),
    prisma.categories.create({ data: { name: '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞' } }),
    prisma.categories.create({ data: { name: '–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è' } }),
    prisma.categories.create({ data: { name: '–í—ã—Ö–ª–æ–ø–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞' } }),
    prisma.categories.create({ data: { name: '–ö—É–∑–æ–≤' } }),
  ]);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);

  // 6. –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
  console.log('üöó –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...');
  const autos = await Promise.all([
    prisma.auto.create({ data: { name: 'BMW E39' } }),
    prisma.auto.create({ data: { name: 'Mercedes W210' } }),
    prisma.auto.create({ data: { name: 'Audi A4 B5' } }),
    prisma.auto.create({ data: { name: 'Volkswagen Passat B5' } }),
    prisma.auto.create({ data: { name: 'Toyota Camry V40' } }),
    prisma.auto.create({ data: { name: 'Honda Accord VII' } }),
    prisma.auto.create({ data: { name: 'Ford Focus II' } }),
    prisma.auto.create({ data: { name: 'Opel Astra G' } }),
  ]);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${autos.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π`);

  // 6.5. –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π
  console.log('‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π...');
  const engineVolumes = await Promise.all([
    prisma.engineVolume.create({ data: { name: '1.6' } }),
    prisma.engineVolume.create({ data: { name: '1.8' } }),
    prisma.engineVolume.create({ data: { name: '2.0' } }),
    prisma.engineVolume.create({ data: { name: '2.2' } }),
    prisma.engineVolume.create({ data: { name: '2.4' } }),
    prisma.engineVolume.create({ data: { name: '2.5' } }),
    prisma.engineVolume.create({ data: { name: '2.8' } }),
    prisma.engineVolume.create({ data: { name: '3.0' } }),
    prisma.engineVolume.create({ data: { name: '3.5' } }),
    prisma.engineVolume.create({ data: { name: '4.0' } }),
  ]);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${engineVolumes.length} –æ–±—ä–µ–º–æ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π`);

  // 7. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
  console.log('üîç –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞...');
  const searchTexts = await Promise.all([
    prisma.textForAuthopartsSearch.create({ data: { text: '–º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—è' } }),
    prisma.textForAuthopartsSearch.create({ data: { text: '–≤–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä' } }),
    prisma.textForAuthopartsSearch.create({ data: { text: '—Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ –ø–µ—Ä–µ–¥–Ω–∏–µ' } }),
    prisma.textForAuthopartsSearch.create({ data: { text: '—Ç–æ—Ä–º–æ–∑–Ω—ã–µ –¥–∏—Å–∫–∏' } }),
    prisma.textForAuthopartsSearch.create({ data: { text: '–∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥–Ω–∏–π' } }),
    prisma.textForAuthopartsSearch.create({ data: { text: '—Å–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è' } }),
  ]);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${searchTexts.length} —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞`);

  // 8. –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π...');
  const autopartsList = [
    {
      article: '0451103316',
      description: '–ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä Bosch',
      brand_id: brands[0].id, // Bosch
      category_id: categories[0].id, // –§–∏–ª—å—Ç—Ä—ã
      text_for_search_id: searchTexts[0].id,
      year_from: 1995,
      year_to: 2010,
    },
    {
      article: 'W712/73',
      description: '–ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä Mann',
      brand_id: brands[1].id, // Mann
      category_id: categories[0].id,
      text_for_search_id: searchTexts[0].id,
      year_from: 1998,
      year_to: 2015,
    },
    {
      article: 'C27011',
      description: '–í–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä Mann',
      brand_id: brands[1].id,
      category_id: categories[0].id,
      text_for_search_id: searchTexts[1].id,
      year_from: 2000,
      year_to: 2018,
    },
    {
      article: 'P85020',
      description: '–¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ –ø–µ—Ä–µ–¥–Ω–∏–µ Brembo',
      brand_id: brands[2].id, // Brembo
      category_id: categories[1].id, // –¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
      text_for_search_id: searchTexts[2].id,
      year_from: 1995,
      year_to: 2005,
    },
    {
      article: '09.9772.11',
      description: '–¢–æ—Ä–º–æ–∑–Ω—ã–µ –¥–∏—Å–∫–∏ –ø–µ—Ä–µ–¥–Ω–∏–µ Brembo',
      brand_id: brands[2].id,
      category_id: categories[1].id,
      text_for_search_id: searchTexts[3].id,
      year_from: 1996,
      year_to: 2008,
    },
    {
      article: '311844',
      description: '–ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥–Ω–∏–π Sachs',
      brand_id: brands[3].id, // Sachs
      category_id: categories[2].id, // –ü–æ–¥–≤–µ—Å–∫–∞
      text_for_search_id: searchTexts[4].id,
      year_from: 1995,
      year_to: 2005,
    },
    {
      article: '313455',
      description: '–ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥–Ω–∏–π Sachs (—É—Å–∏–ª–µ–Ω–Ω—ã–π)',
      brand_id: brands[3].id,
      category_id: categories[2].id,
      text_for_search_id: searchTexts[4].id,
      year_from: 2000,
      year_to: 2010,
    },
    {
      article: 'E149001',
      description: '–§–∏–ª—å—Ç—Ä —Ç–æ–ø–ª–∏–≤–Ω—ã–π Hengst',
      brand_id: brands[4].id, // Hengst
      category_id: categories[0].id,
      text_for_search_id: searchTexts[0].id,
      year_from: 1997,
      year_to: 2012,
    },
    {
      article: 'BKR6E-11',
      description: '–°–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è NGK',
      brand_id: brands[5].id, // NGK
      category_id: categories[4].id, // –≠–ª–µ–∫—Ç—Ä–∏–∫–∞
      text_for_search_id: searchTexts[5].id,
      year_from: 2002,
      year_to: 2020,
    },
    {
      article: '585107',
      description: '–ö–æ–º–ø–ª–µ–∫—Ç —Å—Ü–µ–ø–ª–µ–Ω–∏—è Valeo',
      brand_id: brands[6].id, // Valeo
      category_id: categories[5].id, // –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è
      year_from: 1998,
      year_to: 2008,
    },
    {
      article: '267500-1470',
      description: '–°—Ç–∞—Ä—Ç–µ—Ä Denso',
      brand_id: brands[7].id, // Denso
      category_id: categories[4].id,
      year_from: 2000,
      year_to: 2015,
    },
    {
      article: 'LX1004',
      description: '–í–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä Mahle',
      brand_id: brands[8].id, // Mahle
      category_id: categories[0].id,
      text_for_search_id: searchTexts[1].id,
      year_from: 2003,
      year_to: 2018,
    },
    {
      article: '6203-2RSH',
      description: '–ü–æ–¥—à–∏–ø–Ω–∏–∫ —Å—Ç—É–ø–∏—Ü—ã SKF',
      brand_id: brands[9].id, // SKF
      category_id: categories[2].id,
      year_from: 1995,
      year_to: 2012,
    },
    {
      article: 'OC264',
      description: '–ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä Mahle',
      brand_id: brands[8].id,
      category_id: categories[0].id,
      text_for_search_id: searchTexts[0].id,
      year_from: 2005,
      year_to: 2020,
    },
    {
      article: '09.A419.11',
      description: '–¢–æ—Ä–º–æ–∑–Ω—ã–µ –¥–∏—Å–∫–∏ –∑–∞–¥–Ω–∏–µ Brembo',
      brand_id: brands[2].id,
      category_id: categories[1].id,
      text_for_search_id: searchTexts[3].id,
      year_from: 1996,
      year_to: 2008,
    },
  ];

  const autoparts = [];
  for (const autopartData of autopartsList) {
    const autopart = await prisma.autoparts.create({
      data: autopartData,
    });
    autoparts.push(autopart);
  }
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${autoparts.length} –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π`);

  // 9. –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –∑–∞–ø—á–∞—Å—Ç–µ–π —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
  console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –∑–∞–ø—á–∞—Å—Ç–µ–π —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏...');
  const autopartsAutosData = [
    // –ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä Bosch –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è BMW, Mercedes, Audi
    { autopart_id: autoparts[0].id, auto_id: autos[0].id },
    { autopart_id: autoparts[0].id, auto_id: autos[1].id },
    { autopart_id: autoparts[0].id, auto_id: autos[2].id },
    // –ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä Mann –¥–ª—è VW, Audi
    { autopart_id: autoparts[1].id, auto_id: autos[2].id },
    { autopart_id: autoparts[1].id, auto_id: autos[3].id },
    // –í–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä Mann –¥–ª—è VW, Audi
    { autopart_id: autoparts[2].id, auto_id: autos[2].id },
    { autopart_id: autoparts[2].id, auto_id: autos[3].id },
    // –¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ Brembo –¥–ª—è BMW, Mercedes
    { autopart_id: autoparts[3].id, auto_id: autos[0].id },
    { autopart_id: autoparts[3].id, auto_id: autos[1].id },
    // –¢–æ—Ä–º–æ–∑–Ω—ã–µ –¥–∏—Å–∫–∏ –¥–ª—è BMW, Mercedes, Audi
    { autopart_id: autoparts[4].id, auto_id: autos[0].id },
    { autopart_id: autoparts[4].id, auto_id: autos[1].id },
    { autopart_id: autoparts[4].id, auto_id: autos[2].id },
    // –ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è BMW
    { autopart_id: autoparts[5].id, auto_id: autos[0].id },
    { autopart_id: autoparts[6].id, auto_id: autos[0].id },
    // –¢–æ–ø–ª–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è VW, Audi
    { autopart_id: autoparts[7].id, auto_id: autos[2].id },
    { autopart_id: autoparts[7].id, auto_id: autos[3].id },
    // –°–≤–µ—á–∏ –¥–ª—è —è–ø–æ–Ω—Å–∫–∏—Ö –∞–≤—Ç–æ
    { autopart_id: autoparts[8].id, auto_id: autos[4].id },
    { autopart_id: autoparts[8].id, auto_id: autos[5].id },
    // –í–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä Mahle –¥–ª—è Ford, Opel
    { autopart_id: autoparts[11].id, auto_id: autos[6].id },
    { autopart_id: autoparts[11].id, auto_id: autos[7].id },
  ];

  for (const data of autopartsAutosData) {
    await prisma.autopartsAutos.create({ data });
  }
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${autopartsAutosData.length} —Å–≤—è–∑–µ–π –∑–∞–ø—á–∞—Å—Ç–µ–π —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏`);

  // 9.5. –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –∑–∞–ø—á–∞—Å—Ç–µ–π —Å –æ–±—ä–µ–º–∞–º–∏ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π
  console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –∑–∞–ø—á–∞—Å—Ç–µ–π —Å –æ–±—ä–µ–º–∞–º–∏ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π...');
  const autopartsEngineVolumesData = [
    // –ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä Bosch - –¥–ª—è –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π 1.8, 2.0, 2.2, 2.5
    { autopart_id: autoparts[0].id, engine_volume_id: engineVolumes[1].id }, // 1.8
    { autopart_id: autoparts[0].id, engine_volume_id: engineVolumes[2].id }, // 2.0
    { autopart_id: autoparts[0].id, engine_volume_id: engineVolumes[3].id }, // 2.2
    { autopart_id: autoparts[0].id, engine_volume_id: engineVolumes[5].id }, // 2.5
    // –ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä Mann - –¥–ª—è 1.6, 1.8, 2.0
    { autopart_id: autoparts[1].id, engine_volume_id: engineVolumes[0].id }, // 1.6
    { autopart_id: autoparts[1].id, engine_volume_id: engineVolumes[1].id }, // 1.8
    { autopart_id: autoparts[1].id, engine_volume_id: engineVolumes[2].id }, // 2.0
    // –í–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä Mann - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è –º–Ω–æ–≥–∏—Ö –æ–±—ä–µ–º–æ–≤
    { autopart_id: autoparts[2].id, engine_volume_id: engineVolumes[0].id }, // 1.6
    { autopart_id: autoparts[2].id, engine_volume_id: engineVolumes[1].id }, // 1.8
    { autopart_id: autoparts[2].id, engine_volume_id: engineVolumes[2].id }, // 2.0
    { autopart_id: autoparts[2].id, engine_volume_id: engineVolumes[3].id }, // 2.2
    // –¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ Brembo - –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –∏ –∫—Ä—É–ø–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤
    { autopart_id: autoparts[3].id, engine_volume_id: engineVolumes[2].id }, // 2.0
    { autopart_id: autoparts[3].id, engine_volume_id: engineVolumes[4].id }, // 2.4
    { autopart_id: autoparts[3].id, engine_volume_id: engineVolumes[5].id }, // 2.5
    { autopart_id: autoparts[3].id, engine_volume_id: engineVolumes[6].id }, // 2.8
    { autopart_id: autoparts[3].id, engine_volume_id: engineVolumes[7].id }, // 3.0
    // –¢–æ—Ä–º–æ–∑–Ω—ã–µ –¥–∏—Å–∫–∏ –ø–µ—Ä–µ–¥–Ω–∏–µ - –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–æ–ª–æ–¥–∫–∞–º
    { autopart_id: autoparts[4].id, engine_volume_id: engineVolumes[2].id }, // 2.0
    { autopart_id: autoparts[4].id, engine_volume_id: engineVolumes[4].id }, // 2.4
    { autopart_id: autoparts[4].id, engine_volume_id: engineVolumes[5].id }, // 2.5
    { autopart_id: autoparts[4].id, engine_volume_id: engineVolumes[6].id }, // 2.8
    { autopart_id: autoparts[4].id, engine_volume_id: engineVolumes[7].id }, // 3.0
    // –ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥–Ω–∏–π - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
    { autopart_id: autoparts[5].id, engine_volume_id: engineVolumes[1].id }, // 1.8
    { autopart_id: autoparts[5].id, engine_volume_id: engineVolumes[2].id }, // 2.0
    { autopart_id: autoparts[5].id, engine_volume_id: engineVolumes[5].id }, // 2.5
    { autopart_id: autoparts[5].id, engine_volume_id: engineVolumes[6].id }, // 2.8
    // –ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä —É—Å–∏–ª–µ–Ω–Ω—ã–π - –¥–ª—è –±–æ–ª–µ–µ –º–æ—â–Ω—ã—Ö –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π
    { autopart_id: autoparts[6].id, engine_volume_id: engineVolumes[5].id }, // 2.5
    { autopart_id: autoparts[6].id, engine_volume_id: engineVolumes[6].id }, // 2.8
    { autopart_id: autoparts[6].id, engine_volume_id: engineVolumes[7].id }, // 3.0
    // –¢–æ–ø–ª–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä - –º–∞–ª—ã–µ –∏ —Å—Ä–µ–¥–Ω–∏–µ –æ–±—ä–µ–º—ã
    { autopart_id: autoparts[7].id, engine_volume_id: engineVolumes[0].id }, // 1.6
    { autopart_id: autoparts[7].id, engine_volume_id: engineVolumes[1].id }, // 1.8
    { autopart_id: autoparts[7].id, engine_volume_id: engineVolumes[2].id }, // 2.0
    // –°–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è - –¥–ª—è —è–ø–æ–Ω—Å–∫–∏—Ö –º–æ—Ç–æ—Ä–æ–≤ 2.0, 2.4, 3.0, 3.5
    { autopart_id: autoparts[8].id, engine_volume_id: engineVolumes[2].id }, // 2.0
    { autopart_id: autoparts[8].id, engine_volume_id: engineVolumes[4].id }, // 2.4
    { autopart_id: autoparts[8].id, engine_volume_id: engineVolumes[7].id }, // 3.0
    { autopart_id: autoparts[8].id, engine_volume_id: engineVolumes[8].id }, // 3.5
    // –ö–æ–º–ø–ª–µ–∫—Ç —Å—Ü–µ–ø–ª–µ–Ω–∏—è - —Å—Ä–µ–¥–Ω–∏–µ –æ–±—ä–µ–º—ã
    { autopart_id: autoparts[9].id, engine_volume_id: engineVolumes[1].id }, // 1.8
    { autopart_id: autoparts[9].id, engine_volume_id: engineVolumes[2].id }, // 2.0
    { autopart_id: autoparts[9].id, engine_volume_id: engineVolumes[3].id }, // 2.2
    // –°—Ç–∞—Ä—Ç–µ—Ä - —è–ø–æ–Ω—Å–∫–∏–µ –∞–≤—Ç–æ
    { autopart_id: autoparts[10].id, engine_volume_id: engineVolumes[2].id }, // 2.0
    { autopart_id: autoparts[10].id, engine_volume_id: engineVolumes[4].id }, // 2.4
    { autopart_id: autoparts[10].id, engine_volume_id: engineVolumes[7].id }, // 3.0
    // –í–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä Mahle - –¥–ª—è Ford, Opel (–º–∞–ª—ã–µ –æ–±—ä–µ–º—ã)
    { autopart_id: autoparts[11].id, engine_volume_id: engineVolumes[0].id }, // 1.6
    { autopart_id: autoparts[11].id, engine_volume_id: engineVolumes[1].id }, // 1.8
    { autopart_id: autoparts[11].id, engine_volume_id: engineVolumes[2].id }, // 2.0
    // –ü–æ–¥—à–∏–ø–Ω–∏–∫ —Å—Ç—É–ø–∏—Ü—ã - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
    { autopart_id: autoparts[12].id, engine_volume_id: engineVolumes[0].id }, // 1.6
    { autopart_id: autoparts[12].id, engine_volume_id: engineVolumes[1].id }, // 1.8
    { autopart_id: autoparts[12].id, engine_volume_id: engineVolumes[2].id }, // 2.0
    { autopart_id: autoparts[12].id, engine_volume_id: engineVolumes[3].id }, // 2.2
    // –ú–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä Mahle - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–≤–∏–≥–∞—Ç–µ–ª–∏
    { autopart_id: autoparts[13].id, engine_volume_id: engineVolumes[1].id }, // 1.8
    { autopart_id: autoparts[13].id, engine_volume_id: engineVolumes[2].id }, // 2.0
    { autopart_id: autoparts[13].id, engine_volume_id: engineVolumes[4].id }, // 2.4
    { autopart_id: autoparts[13].id, engine_volume_id: engineVolumes[7].id }, // 3.0
    // –¢–æ—Ä–º–æ–∑–Ω—ã–µ –¥–∏—Å–∫–∏ –∑–∞–¥–Ω–∏–µ
    { autopart_id: autoparts[14].id, engine_volume_id: engineVolumes[2].id }, // 2.0
    { autopart_id: autoparts[14].id, engine_volume_id: engineVolumes[4].id }, // 2.4
    { autopart_id: autoparts[14].id, engine_volume_id: engineVolumes[5].id }, // 2.5
    { autopart_id: autoparts[14].id, engine_volume_id: engineVolumes[6].id }, // 2.8
  ];

  for (const data of autopartsEngineVolumesData) {
    await prisma.autopartsEngineVolumes.create({ data });
  }
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${autopartsEngineVolumesData.length} —Å–≤—è–∑–µ–π –∑–∞–ø—á–∞—Å—Ç–µ–π —Å –æ–±—ä–µ–º–∞–º–∏ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π`);

  // 10. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
  console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö...');
  const warehouseData = [];
  for (const autopart of autoparts) {
    // –ö–∞–∂–¥–∞—è –∑–∞–ø—á–∞—Å—Ç—å –Ω–∞ 1-3 —Å–∫–ª–∞–¥–∞—Ö —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    const numWarehouses = Math.floor(Math.random() * 3) + 1;
    const selectedWarehouses = warehouses
      .sort(() => Math.random() - 0.5)
      .slice(0, numWarehouses);

    for (const warehouse of selectedWarehouses) {
      warehouseData.push({
        authopart_id: autopart.id,
        warehouse_id: warehouse.id,
        quantity: Math.floor(Math.random() * 50) + 1,
      });
    }
  }

  for (const data of warehouseData) {
    await prisma.autopartsWarehouses.create({ data });
  }
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${warehouseData.length} –∑–∞–ø–∏—Å–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö`);

  // 11. –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω
  console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω...');
  const pricesData = [];
  for (const autopart of autoparts) {
    // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
    const basePrice = Math.floor(Math.random() * 5000) + 100;

    for (let i = 0; i < priceTypes.length; i++) {
      // –†–æ–∑–Ω–∏—á–Ω–∞—è - –±–∞–∑–æ–≤–∞—è, –æ–ø—Ç–æ–≤–∞—è -10%, VIP -20%, –¥–∏–ª–µ—Ä—Å–∫–∞—è -30%
      const discount = i * 0.1;
      const price = Math.round(basePrice * (1 - discount));

      pricesData.push({
        authopart_id: autopart.id,
        pricesType_id: priceTypes[i].id,
        price: price,
      });
    }
  }

  for (const data of pricesData) {
    await prisma.autopartPrices.create({ data });
  }
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${pricesData.length} —Ü–µ–Ω`);

  // 12. –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–æ–≤
  console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–æ–≤...');
  const analogues = [
    // –ú–∞—Å–ª—è–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã - –∞–Ω–∞–ª–æ–≥–∏
    { partAId: autoparts[0].id, partBId: autoparts[1].id },
    { partAId: autoparts[0].id, partBId: autoparts[13].id },
    { partAId: autoparts[1].id, partBId: autoparts[13].id },
    // –í–æ–∑–¥—É—à–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã - –∞–Ω–∞–ª–æ–≥–∏
    { partAId: autoparts[2].id, partBId: autoparts[11].id },
    // –ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã - –∞–Ω–∞–ª–æ–≥–∏
    { partAId: autoparts[5].id, partBId: autoparts[6].id },
    // –¢–æ—Ä–º–æ–∑–Ω—ã–µ –¥–∏—Å–∫–∏
    { partAId: autoparts[4].id, partBId: autoparts[14].id },
  ];

  for (const data of analogues) {
    await prisma.analogues.create({ data });
  }
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${analogues.length} –∑–∞–ø–∏—Å–µ–π –æ–± –∞–Ω–∞–ª–æ–≥–∞—Ö`);

  // 13. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
  console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤...');
  const clients = await Promise.all([
    prisma.clients.create({
      data: {
        name: '–ò–ü –ò–≤–∞–Ω–æ–≤',
        fullName: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
        address: '–≥. –ö–∏–µ–≤, —É–ª. –ë–∏–∑–Ω–µ—Å, 5',
      },
    }),
    prisma.clients.create({
      data: {
        name: '–û–û–û "–ê–≤—Ç–æ–°–µ—Ä–≤–∏—Å"',
        fullName: '–û–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é "–ê–≤—Ç–æ–°–µ—Ä–≤–∏—Å"',
        address: '–≥. –•–∞—Ä—å–∫–æ–≤, –ø—Ä. –ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç–æ–≤, 12',
      },
    }),
    prisma.clients.create({
      data: {
        name: '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.',
        fullName: '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á',
        address: '–≥. –û–¥–µ—Å—Å–∞, —É–ª. –ú–æ—Ä—Å–∫–∞—è, 23',
      },
    }),
    prisma.clients.create({
      data: {
        name: '–¢–û–í "–ó–∞–ø—á–∞—Å—Ç–∏"',
        fullName: '–¢–æ–≤–∞—Ä–∏—Å—Ç–≤–æ –∑ –æ–±–º–µ–∂–µ–Ω–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—é "–ó–∞–ø—á–∞—Å—Ç–∏"',
        address: '–≥. –î–Ω–µ–ø—Ä, —É–ª. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è, 78',
      },
    }),
  ]);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${clients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);

  // 14. –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
  console.log('üöö –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏...');
  const deliveryMethods = await Promise.all([
    prisma.deliveryMethods.create({
      data: { name: '–°–∞–º–æ–≤—ã–≤–æ–∑', hexColor: '#3B82F6' },
    }),
    prisma.deliveryMethods.create({
      data: { name: '–ö—É—Ä—å–µ—Ä', hexColor: '#10B981' },
    }),
    prisma.deliveryMethods.create({
      data: { name: '–ù–æ–≤–∞—è –ü–æ—á—Ç–∞', hexColor: '#F59E0B' },
    }),
    prisma.deliveryMethods.create({
      data: { name: '–£–∫—Ä–ø–æ—á—Ç–∞', hexColor: '#6366F1' },
    }),
  ]);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${deliveryMethods.length} —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏`);

  // 15. –°–≤—è–∑—å –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ —Å–ø–æ—Å–æ–±–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ —Å–ø–æ—Å–æ–±–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏...');
  const clientDeliveryData = [
    { client_id: clients[0].id, deliveryMethod_id: deliveryMethods[0].id },
    { client_id: clients[0].id, deliveryMethod_id: deliveryMethods[2].id },
    { client_id: clients[1].id, deliveryMethod_id: deliveryMethods[1].id },
    { client_id: clients[1].id, deliveryMethod_id: deliveryMethods[2].id },
    { client_id: clients[2].id, deliveryMethod_id: deliveryMethods[0].id },
    { client_id: clients[2].id, deliveryMethod_id: deliveryMethods[1].id },
    { client_id: clients[2].id, deliveryMethod_id: deliveryMethods[2].id },
    { client_id: clients[3].id, deliveryMethod_id: deliveryMethods[2].id },
    { client_id: clients[3].id, deliveryMethod_id: deliveryMethods[3].id },
  ];

  for (const data of clientDeliveryData) {
    await prisma.clientsDeliveryMethods.create({ data });
  }
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${clientDeliveryData.length} —Å–≤—è–∑–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ —Å–ø–æ—Å–æ–±–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏`);

  // 16. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
  console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤...');
  const orderStatuses = await Promise.all([
    prisma.orderStatuses.create({
      data: { name: '–ù–æ–≤—ã–π', hexColor: '#3B82F6', isLast: false },
    }),
    prisma.orderStatuses.create({
      data: { name: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', hexColor: '#F59E0B', isLast: false },
    }),
    prisma.orderStatuses.create({
      data: { name: '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ', hexColor: '#10B981', isLast: false },
    }),
    prisma.orderStatuses.create({
      data: { name: '–í—ã–¥–∞–Ω', hexColor: '#8B5CF6', isLast: false },
    }),
    prisma.orderStatuses.create({
      data: { name: '–û–ø–ª–∞—á–µ–Ω', hexColor: '#059669', isLast: true },
    }),
    prisma.orderStatuses.create({
      data: { name: '–û—Ç–º–µ–Ω–µ–Ω', hexColor: '#EF4444', isLast: true },
    }),
  ]);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${orderStatuses.length} —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤`);

  // 17. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
  console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤...');
  const orders = [];
  
  // –ó–∞–∫–∞–∑ 1 - –Ω–æ–≤—ã–π
  const order1 = await prisma.orders.create({
    data: {
      client_id: clients[0].id,
      deliveryMethod_id: deliveryMethods[0].id,
      orderStatus_id: orderStatuses[0].id,
      createdAt: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    },
  });
  orders.push(order1);

  // –ó–∞–∫–∞–∑ 2 - –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
  const order2 = await prisma.orders.create({
    data: {
      client_id: clients[1].id,
      deliveryMethod_id: deliveryMethods[1].id,
      orderStatus_id: orderStatuses[1].id,
      createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24), // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
    },
  });
  orders.push(order2);

  // –ó–∞–∫–∞–∑ 3 - –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ
  const order3 = await prisma.orders.create({
    data: {
      client_id: clients[2].id,
      deliveryMethod_id: deliveryMethods[2].id,
      orderStatus_id: orderStatuses[2].id,
      createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2), // 2 –¥–Ω—è –Ω–∞–∑–∞–¥
      issuedAt: new Date(Date.now() - 1000 * 60 * 60 * 12), // 12 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
    },
  });
  orders.push(order3);

  // –ó–∞–∫–∞–∑ 4 - –≤—ã–¥–∞–Ω
  const order4 = await prisma.orders.create({
    data: {
      client_id: clients[3].id,
      deliveryMethod_id: deliveryMethods[2].id,
      orderStatus_id: orderStatuses[3].id,
      createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5), // 5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
      issuedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 3), // 3 –¥–Ω—è –Ω–∞–∑–∞–¥
    },
  });
  orders.push(order4);

  // –ó–∞–∫–∞–∑ 5 - –æ–ø–ª–∞—á–µ–Ω
  const order5 = await prisma.orders.create({
    data: {
      client_id: clients[0].id,
      deliveryMethod_id: deliveryMethods[0].id,
      orderStatus_id: orderStatuses[4].id,
      createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7), // 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
      issuedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5), // 5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
      paidAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 4), // 4 –¥–Ω—è –Ω–∞–∑–∞–¥
    },
  });
  orders.push(order5);

  // –ó–∞–∫–∞–∑ 6 - –æ—Ç–º–µ–Ω–µ–Ω
  const order6 = await prisma.orders.create({
    data: {
      client_id: clients[1].id,
      deliveryMethod_id: deliveryMethods[3].id,
      orderStatus_id: orderStatuses[5].id,
      createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 10), // 10 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
    },
  });
  orders.push(order6);

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤`);

  // 18. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–æ–≤
  console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–æ–≤...');
  const orderItemsData = [
    // –ó–∞–∫–∞–∑ 1
    {
      order_id: order1.id,
      authopart_id: autoparts[0].id,
      warehouse_id: warehouses[0].id,
      quantity: 2,
      item_final_price: 450,
    },
    {
      order_id: order1.id,
      authopart_id: autoparts[2].id,
      warehouse_id: warehouses[0].id,
      quantity: 1,
      item_final_price: 350,
    },
    // –ó–∞–∫–∞–∑ 2
    {
      order_id: order2.id,
      authopart_id: autoparts[3].id,
      warehouse_id: warehouses[1].id,
      quantity: 1,
      item_final_price: 2500,
    },
    {
      order_id: order2.id,
      authopart_id: autoparts[4].id,
      warehouse_id: warehouses[1].id,
      quantity: 2,
      item_final_price: 3200,
    },
    {
      order_id: order2.id,
      authopart_id: autoparts[8].id,
      warehouse_id: warehouses[1].id,
      quantity: 4,
      item_final_price: 280,
    },
    // –ó–∞–∫–∞–∑ 3
    {
      order_id: order3.id,
      authopart_id: autoparts[5].id,
      warehouse_id: warehouses[0].id,
      quantity: 2,
      item_final_price: 4500,
    },
    {
      order_id: order3.id,
      authopart_id: autoparts[1].id,
      warehouse_id: warehouses[0].id,
      quantity: 1,
      item_final_price: 420,
    },
    // –ó–∞–∫–∞–∑ 4
    {
      order_id: order4.id,
      authopart_id: autoparts[9].id,
      warehouse_id: warehouses[2].id,
      quantity: 1,
      item_final_price: 8500,
    },
    // –ó–∞–∫–∞–∑ 5
    {
      order_id: order5.id,
      authopart_id: autoparts[7].id,
      warehouse_id: warehouses[0].id,
      quantity: 1,
      item_final_price: 650,
    },
    {
      order_id: order5.id,
      authopart_id: autoparts[0].id,
      warehouse_id: warehouses[0].id,
      quantity: 1,
      item_final_price: 450,
    },
    // –ó–∞–∫–∞–∑ 6 (–æ—Ç–º–µ–Ω–µ–Ω)
    {
      order_id: order6.id,
      authopart_id: autoparts[10].id,
      warehouse_id: warehouses[1].id,
      quantity: 1,
      item_final_price: 15000,
    },
  ];

  for (const data of orderItemsData) {
    await prisma.orderItems.create({ data });
  }
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${orderItemsData.length} –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–æ–≤`);

  // 19. –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  console.log('üìú –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
  const logs = [
    {
      autopartId: autoparts[0].id,
      userId: admin.id,
      action: 'updated',
      field: 'quantity',
      oldValue: '10',
      newValue: '15',
      createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 3),
    },
    {
      autopartId: autoparts[3].id,
      userId: admin.id,
      action: 'moved',
      field: 'warehouse',
      oldValue: `–°–∫–ª–∞–¥ ‚Ññ2`,
      newValue: `–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥`,
      createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2),
    },
    {
      autopartId: autoparts[5].id,
      userId: users[0].id,
      action: 'updated',
      field: 'price',
      oldValue: '4200',
      newValue: '4500',
      createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24),
    },
  ];

  for (const log of logs) {
    await prisma.autopartLog.create({ data: log });
  }
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${logs.length} –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö`);

  console.log('\n‚ú® –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
  console.log('\nüìä –°–≤–æ–¥–∫–∞:');
  console.log(`   - –¢–∏–ø–æ–≤ —Ü–µ–Ω: ${priceTypes.length}`);
  console.log(`   - –°–∫–ª–∞–¥–æ–≤: ${warehouses.length}`);
  console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length + 1}`);
  console.log(`   - –ë—Ä–µ–Ω–¥–æ–≤: ${brands.length}`);
  console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
  console.log(`   - –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${autos.length}`);
  console.log(`   - –û–±—ä–µ–º–æ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π: ${engineVolumes.length}`);
  console.log(`   - –ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π: ${autoparts.length}`);
  console.log(`   - –ö–ª–∏–µ–Ω—Ç–æ–≤: ${clients.length}`);
  console.log(`   - –°–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryMethods.length}`);
  console.log(`   - –°—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤: ${orderStatuses.length}`);
  console.log(`   - –ó–∞–∫–∞–∑–æ–≤: ${orders.length}`);
  console.log(`   - –ü–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–æ–≤: ${orderItemsData.length}`);
  console.log(`   - –ê–Ω–∞–ª–æ–≥–æ–≤: ${analogues.length}`);
  console.log(`   - –õ–æ–≥–æ–≤: ${logs.length}`);
  console.log('\nüîë –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
  console.log('   - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin@autohub.com / password123');
  console.log('   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1: ivan@example.com / password123');
  console.log('   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: maria@example.com / password123');
  console.log('   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3: alex@example.com / password123');
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e);
    await prisma.$disconnect();
    process.exit(1);
  });

